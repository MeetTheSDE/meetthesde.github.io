import {
  import_shim
} from "./chunk-NUEPU4YK.js";
import "./chunk-DRWLMN53.js";
import "./chunk-G3PMV62Z.js";

// node_modules/wouter/esm/use-hash-location.js
var listeners = {
  v: []
};
var onHashChange = () => listeners.v.forEach((cb) => cb());
var subscribeToHashUpdates = (callback) => {
  if (listeners.v.push(callback) === 1)
    addEventListener("hashchange", onHashChange);
  return () => {
    listeners.v = listeners.v.filter((i) => i !== callback);
    if (!listeners.v.length) removeEventListener("hashchange", onHashChange);
  };
};
var currentHashLocation = () => "/" + location.hash.replace(/^#?\/?/, "");
var navigate = (to, { state = null, replace = false } = {}) => {
  const [hash, search] = to.replace(/^#?\/?/, "").split("?");
  const newRelativePath = location.pathname + (search ? `?${search}` : location.search) + `#/${hash}`;
  const oldURL = location.href;
  const newURL = new URL(newRelativePath, location.origin).href;
  if (replace) {
    history.replaceState(state, "", newRelativePath);
  } else {
    history.pushState(state, "", newRelativePath);
  }
  const event = typeof HashChangeEvent !== "undefined" ? new HashChangeEvent("hashchange", { oldURL, newURL }) : new Event("hashchange", { detail: { oldURL, newURL } });
  dispatchEvent(event);
};
var useHashLocation = ({ ssrPath = "/" } = {}) => [
  (0, import_shim.useSyncExternalStore)(
    subscribeToHashUpdates,
    currentHashLocation,
    () => ssrPath
  ),
  navigate
];
useHashLocation.hrefs = (href) => "#" + href;
export {
  navigate,
  useHashLocation
};
//# sourceMappingURL=wouter_use-hash-location.js.map
